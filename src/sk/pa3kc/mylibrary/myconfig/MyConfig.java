package sk.pa3kc.mylibrary.myconfig;

import sk.pa3kc.mylibrary.DefaultSystemPropertyStrings;

import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Pattern;

import sk.pa3kc.mylibrary.enums.ConfigurationType;
import sk.pa3kc.mylibrary.myregex.MyRegex;

@SuppressWarnings ({ "unused", "WeakerAccess", "PointlessBooleanExpression", "UnusedReturnValue" })
public class MyConfig
{
    public static String NewLine = DefaultSystemPropertyStrings.LINE_SEPARATOR;

    private boolean _debug = false;
    private File _configurationFile;
    private String _nameOfProgram = "";
    private ConfigurationType _configurationType = ConfigurationType.UNKNOWN;
    private MyConfigCategoryCollection _categoryCollection = new MyConfigCategoryCollection();

    public boolean getDebug() { return this._debug; }
    public void setDebug(boolean value) { this._debug = value; }
    public ConfigurationType getType() { return this._configurationType; }
    public void setType(ConfigurationType value) { this._configurationType = value; }
    public MyConfigCategoryCollection getCategoryCollection() { return this._categoryCollection; }
    public void setCategory(MyConfigCategoryCollection value) { this._categoryCollection = value; }

    public MyConfig(String path, String nameOfProgram, boolean debug) throws IOException { this._debug = debug; InitializeComponents(path, nameOfProgram); }
    public MyConfig(String path, String nameOfProgram) throws IOException { InitializeComponents(path, nameOfProgram); }
    public MyConfig(String path) throws IOException { InitializeComponents(path, this._nameOfProgram); }
    private void InitializeComponents(String path, String _nameOfProgram) throws IOException
    {
        this._configurationFile = new File(path);
        if (this._configurationFile.exists() == false) CreateConfig();
        LoadConfig();
    }

    @Override
    public void finalize()
    {
        LOG("Clearing RAM:" + NewLine);
        LOG("nameOfProgram" + NewLine);
        this._nameOfProgram = null;
        LOG("configurationFile" + NewLine);
        this._configurationFile = null;

        if (this._categoryCollection == null) return;
        for (short category = 0; category < this._categoryCollection.getLength(); category++)
        {
            for (short row = 0; row < this._categoryCollection.getCategory(category).getRowCollection().getLength(); row++)
            {
                for (short column = 0; column < this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getLength(); column++)
                {
                    LOG("Category[" + category + "].Row[" + row + "].Column[" + column + "]" + NewLine);
                    this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getColumn(column).finalize();
                }
                LOG("Category[" + category + "].Row[" + row + "].ColumnCollection" + NewLine);
                this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().finalize();
                LOG("Category[" + category + "].Row[" + row + "]" + NewLine);
                this._categoryCollection.getCategory(category).getRowCollection().getRow(row).finalize();
            }
            LOG("Category[" + category + "].RowCollection" + NewLine);
            this._categoryCollection.getCategory(category).getRowCollection().finalize();
            LOG("Category[" + category + "]" + NewLine);
            this._categoryCollection.getCategory(category).finalize();
        }
        LOG("CategoryCollection" + NewLine);
        this._categoryCollection.finalize();
        try { super.finalize(); } catch (Throwable ex) { LOG(ex); }
    }

    private void CreateConfig() throws IOException, SecurityException
    {
        //if (this._configurationFile.createNewFile() == false) throw new IOException("Failed to create config file");

        BufferedWriter writer = new BufferedWriter(new FileWriter(this._configurationFile));
        writer.write("#.inf file generated by program " + this._nameOfProgram + NewLine);
        writer.write("#DO NOT EDIT, UNLESS YOU KNOW HOW" + NewLine);
        writer.close();
    }

    /**
     * Saves current configuration to file in installation folder
     */
    public void SaveConfig() throws IOException
    {
        for (short row = 0; row < this._categoryCollection.getCategory(0).getRowCollection().getLength(); row++)
            for (short column = 0; column < this._categoryCollection.getCategory(0).getRowCollection().getRow(row).getColumnCollection().getLength(); column++)
                LOG("Category[0].Row[" + row + "].Column[" + column + "].Value = " + this._categoryCollection.getCategory(0).getRowCollection().getRow(row).getColumnCollection().getColumn(column).getValue());

        CreateConfig();
        BufferedWriter writer = new BufferedWriter(new FileWriter(this._configurationFile, true));

        if (this._configurationType == ConfigurationType.SIMPLE)
        {
            for (short row = 0; row < this._categoryCollection.getCategory(0).getRowCollection().getLength(); row++)
            {
                writer.write("\"" + this._categoryCollection.getCategory(0).getRowCollection().getRow(row).getColumnCollection().getColumn(0).getValue() + "\"");
                writer.write("=");
                writer.write("\"" + this._categoryCollection.getCategory(0).getRowCollection().getRow(row).getColumnCollection().getColumn(1).getValue() + "\"");
                writer.write(NewLine);
            }
        }
        else
        {
            for (short category = 0; category < this._categoryCollection.getLength(); category++)
            {
                writer.write("[" + this._categoryCollection.getCategory(category).getName() + "]" + NewLine);
                for (short row = 0; row < this._categoryCollection.getCategory(category).getRowCollection().getLength(); row++)
                {
                    writer.write("\"" + this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getColumn(0).getValue() + "\"");
                    writer.write("=");
                    writer.write("\"" + this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getColumn(1).getValue() + "\"");
                    writer.write(NewLine);
                }
                writer.write("#" + NewLine);
            }
        }

        writer.close();
    }

    private void LoadConfig() throws IOException
    {
        FileInputStream fileStream = new FileInputStream(this._configurationFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(fileStream));
        String line;

        while ((line = reader.readLine()) != null)
        {
            if (line.startsWith("#") == true) continue;
            if (line.startsWith("[") == true)
            {
                this._configurationType = ConfigurationType.COMPLEX;
                break;
            }
            if (line.startsWith("\"") == true)
            {
                this._configurationType = ConfigurationType.SIMPLE;
                this._categoryCollection.addCategory();
                break;
            }
        }
        fileStream.getChannel().position(0);

        if (this._configurationType == ConfigurationType.COMPLEX)
        {
            while ((line = reader.readLine()) != null) { if (line.startsWith("[") == true) this._categoryCollection.addCategory(); }
        }
        fileStream.getChannel().position(0);

        if (this._categoryCollection == null) return;

        short categories = 0;
        short rows = 0;
        while ((line = reader.readLine()) != null)
        {
            if (line.startsWith("#") == true) continue;
            if (line.startsWith("[") == true)
            {
                if (this._categoryCollection.getCategory(categories).getName() != null) categories++;
                this._categoryCollection.getCategory(categories).setName(MyRegex.Matches(line, "^\\[(.*?)\\]$", Pattern.MULTILINE)[0]);
                rows = 0;
            }
            if (line.startsWith("\"") == true)
            {
                String[] groups = MyRegex.Matches(line, "^\\\"(.*?)\\\"=\\\"(.*?)\\\"$", Pattern.MULTILINE);
                this._categoryCollection.getCategory(categories).getRowCollection().addRow();
                this._categoryCollection.getCategory(categories).getRowCollection().getRow(rows).getColumnCollection().getColumn(0).setValue(groups[0]);
                this._categoryCollection.getCategory(categories).getRowCollection().getRow(rows).getColumnCollection().getColumn(1).setValue(groups[1]);
                rows++;
            }
        }
    }

    private void ManualSet(ConfigurationType type)
    {
        LOG("Configuration type has been manually set to ");
        this._categoryCollection = new MyConfigCategoryCollection();
        switch (type)
        {
            case COMPLEX: LOG("COMPLEX"); break;
            case SIMPLE: LOG("SIMPLE"); this._categoryCollection.addCategory(); break;
            case UNKNOWN: LOG("UNKNOWN"); break;
        }
        LOG(NewLine);
    }

    private void LOG(String text) { if (this._debug == true) System.out.print(text); }
    private void LOG(Throwable ex) { if (this._debug == true) ex.printStackTrace(System.out); }
}
