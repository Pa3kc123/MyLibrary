package sk.pa3kc.mylibrary.MyConfig;

import sk.pa3kc.mylibrary.MyRegex;
import sk.pa3kc.mylibrary.Enums.ConfigurationType;

import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Pattern;

@SuppressWarnings ({ "unused", "WeakerAccess", "PointlessBooleanExpression", "UnusedReturnValue" })
public class MyConfig
{
    public static String NewLine = System.lineSeparator();

    private Boolean _debug = false;
    private File _configurationFile;
    private String _nameOfProgram = "";
    private ConfigurationType _configurationType = ConfigurationType.UNKNOWN;
    private MyConfigCategoryCollection _categoryCollection = new MyConfigCategoryCollection();

    public Boolean getDebug() { return this._debug; }
    public Void setDebug(Boolean value) { this._debug = value; return null; }
    public ConfigurationType getType() { return this._configurationType; }
    public Void setType(ConfigurationType value) { this._configurationType = value; return null; }
    public MyConfigCategoryCollection getCategoryCollection() { return this._categoryCollection; }
    public Void setCategory(MyConfigCategoryCollection value) { this._categoryCollection = value; return null; }

    public MyConfig(String path, String nameOfProgram, boolean debug) { this._debug = debug; InitializeComponents(path, nameOfProgram); }
    public MyConfig(String path, String nameOfProgram) { InitializeComponents(path, nameOfProgram); }
    public MyConfig(String path) { InitializeComponents(path, this._nameOfProgram); }

    private Void InitializeComponents(String path, String _nameOfProgram)
    {
        this._configurationFile = new File(path);
        if (this._configurationFile.exists() == false) CreateConfig();

        LoadConfig();
        return null;
    }
    @Override
    public void finalize()
    {
        LOG("Clearing RAM:" + NewLine);
        LOG("nameOfProgram" + NewLine);
        this._nameOfProgram = null;
        LOG("configurationFile" + NewLine);
        this._configurationFile = null;

        if (this._categoryCollection == null) return;
        for (Short category = 0; category < this._categoryCollection.getLength(); category++)
        {
            for (Short row = 0; row < this._categoryCollection.getCategory(category).getRowCollection().getLength(); row++)
            {
                for (Short column = 0; column < this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getLength(); column++)
                {
                    LOG("Category[" + category + "].Row[" + row + "].Column[" + column + "]" + NewLine);
                    this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getColumn(column).finalize();
                }
                LOG("Category[" + category + "].Row[" + row + "].ColumnCollection" + NewLine);
                this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().finalize();
                LOG("Category[" + category + "].Row[" + row + "]" + NewLine);
                this._categoryCollection.getCategory(category).getRowCollection().getRow(row).finalize();
            }
            LOG("Category[" + category + "].RowCollection" + NewLine);
            this._categoryCollection.getCategory(category).getRowCollection().finalize();
            LOG("Category[" + category + "]" + NewLine);
            this._categoryCollection.getCategory(category).finalize();
        }
        LOG("CategoryCollection" + NewLine);
        this._categoryCollection.finalize();
        try { super.finalize(); } catch (Throwable ex) { LOG(ex); }
    }

    private boolean CreateConfig()
    {
        try
        {
            if (this._configurationFile.createNewFile() == false) throw new IOException("Failed to create config file");
            BufferedWriter writer = new BufferedWriter(new FileWriter(this._configurationFile));
            writer.write("#.inf file generated by program " + this._nameOfProgram + NewLine);
            writer.write("#DO NOT EDIT, UNLESS YOU KNOW HOW" + NewLine);
            writer.close();
            return true;
        }
        catch (Exception ex)
        {
            LOG(ex);
            return false;
        }
    }

    /**
     * Saves current configuration to file in installation folder
     * @return UA.DONE when saved successfully, otherwise UA.ERROR
     */
    public boolean SaveConfig()
    {
        for (Short row = 0; row < this._categoryCollection.getCategory(0).getRowCollection().getLength(); row++)
            for (Short column = 0; column < this._categoryCollection.getCategory(0).getRowCollection().getRow(column).getColumnCollection().getLength(); column++)
                LOG("Category[0].Row[" + row + "].Column[" + column + "].Value = " + this._categoryCollection.getCategory(0).getRowCollection().getRow(column).getColumnCollection().getColumn(column).getValue());

        try
        {
            if (CreateConfig() == false) return false;
            BufferedWriter writer = new BufferedWriter(new FileWriter(this._configurationFile, true));

            if (this._configurationType == ConfigurationType.SIMPLE)
            {
                for (Short row = 0; row < this._categoryCollection.getCategory(0).getRowCollection().getLength(); row++)
                {
                    writer.write("\"" + this._categoryCollection.getCategory(0).getRowCollection().getRow(row).getColumnCollection().getColumn(0).getValue() + "\"");
                    writer.write("=");
                    writer.write("\"" + this._categoryCollection.getCategory(0).getRowCollection().getRow(row).getColumnCollection().getColumn(1).getValue() + "\"");
                    writer.write(NewLine);
                }
            }
            else
            {
                for (Short category = 0; category < this._categoryCollection.getLength(); category++)
                {
                    writer.write("[" + this._categoryCollection.getCategory(category).getName() + "]" + NewLine);
                    for (Short row = 0; row < this._categoryCollection.getCategory(category).getRowCollection().getLength(); row++)
                    {
                        writer.write("\"" + this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getColumn(0).getValue() + "\"");
                        writer.write("=");
                        writer.write("\"" + this._categoryCollection.getCategory(category).getRowCollection().getRow(row).getColumnCollection().getColumn(1).getValue() + "\"");
                        writer.write(NewLine);
                    }
                    writer.write("#" + NewLine);
                }
            }

            writer.close();
            return true;
        }
        catch (Exception ex)
        {
            LOG(ex);
            return false;
        }
    }
    private void LoadConfig()
    {
        try
        {
            FileInputStream fileStream = new FileInputStream(this._configurationFile);
            BufferedReader reader = new BufferedReader(new InputStreamReader(fileStream));
            String line;

            while ((line = reader.readLine()) != null)
            {
                if (line.startsWith("#") == true) continue;
                if (line.startsWith("[") == true)
                {
                    this._configurationType = ConfigurationType.COMPLEX;
                    break;
                }
                if (line.startsWith("\"") == true)
                {
                    this._configurationType = ConfigurationType.SIMPLE;
                    this._categoryCollection.Add();
                    break;
                }
            }
            fileStream.getChannel().position(0);

            if (this._configurationType == ConfigurationType.COMPLEX)
            {
                while ((line = reader.readLine()) != null) { if (line.startsWith("[") == true) this._categoryCollection.Add(); }
            }
            fileStream.getChannel().position(0);

            if (this._categoryCollection == null) return;

            Short categories = 0;
            Short rows = 0;
            while ((line = reader.readLine()) != null)
            {
                if (line.startsWith("#") == true) continue;
                if (line.startsWith("[") == true)
                {
                    if (this._categoryCollection.getCategory(categories).getName() != null) categories++;
                    this._categoryCollection.getCategory(categories).setName(MyRegex.Matches(line, "^\\[(.*?)\\]$", Pattern.MULTILINE)[0]);
                    rows = 0;
                }
                if (line.startsWith("\"") == true)
                {
                    String[] groups = MyRegex.Matches(line, "^\\\"(.*?)\\\"=\\\"(.*?)\\\"$", Pattern.MULTILINE);
                    this._categoryCollection.getCategory(categories).getRowCollection().Add();
                    this._categoryCollection.getCategory(categories).getRowCollection().getRow(rows).getColumnCollection().getColumn(0).setValue(groups[0]);
                    this._categoryCollection.getCategory(categories).getRowCollection().getRow(rows).getColumnCollection().getColumn(1).setValue(groups[1]);
                    rows++;
                }
            }
        }
        catch (Exception ex)
        {
            LOG(ex);
        }
    }

    private void ManualSet(ConfigurationType type)
    {
        LOG("Configuration type has been manually set to ");
        this._categoryCollection = new MyConfigCategoryCollection();
        switch (type)
        {
            case COMPLEX: LOG("COMPLEX"); break;
            case SIMPLE: LOG("SIMPLE"); this._categoryCollection.Add(); break;
            case UNKNOWN: LOG("UNKNOWN"); break;
        }
        LOG(NewLine);
    }

    private void LOG(String text) { if (this._debug == true) System.out.print(text); }
    private void LOG(Throwable ex) { if (this._debug == true) ex.printStackTrace(System.out); }
}
